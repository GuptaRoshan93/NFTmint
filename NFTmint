// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.4;

import '@openzeppelin/contracts/token/ERC721/ERC721.sol';
import '@openzeppelin/contracts/access/Ownable.sol';

contract NFTMINT is ERC721, Ownable {
    uint256 public mintPrice = 0.05 ether;
    uint256 public totalSupply;
    uint256 public maxSupply;
    bool public isMintEnable;
    mapping(address => uint256) public mintWallets;

    constructor() payable ERC721( 'Simple Mint', 'SIMPL') {
        maxSupply=2;
    }

    function toggleIsMintEnable() external onlyOwner {
        isMintEnable= !isMintEnable;
    
    }
    function setMaxSupply(uint256 maxSupply_) external onlyOwner {
        maxSupply= maxSupply_;

    }
 
    function mint() external payable {
         require(isMintEnable, 'minting not enable');
         require(mintWallets[msg.sender] < 1, 'exceeds max per wallet');
         require(msg.value == mintPrice, 'wrong value');
         require(maxSupply > totalSupply, 'soldout');

         mintWallets[msg.sender]++;
         totalSupply++;
         uint256 tokenId =totalSupply;
         _safeMint(msg.sender, tokenId);

    }
} 

